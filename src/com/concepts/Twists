
JAVA DATA STRUCTURES -> LINKED LIST, ARRAY LIST, STACK, QUEUE & HASHMAP
JAVA ALGORITHMS -> BUBBLE SORT, QUICK SORT


Class ->  A class is a user defined blueprint from which objects are created.
		  A class typically have modifiers, classname, body	
Object -> A object is an instance of a class. Object have identity, state and behaviour.
			Identity - Name of the object
			State ->   Breed, age, colour
			Behaviour -> Bark, sleep
			
Inheritance - Inheritance is aquiring parent properties. Inherit the features of other classes.
.Abstarction - Showing necessary details to clients and hiding non essential things. A car can shown as a car to the user, not required how internal things works.
			   can be acheived using Abstarct class and interfaces.   
Data Hiding - Data hiding is showing shielding the data members using access modifiers. 
Encapsulation - Wrappping up the data into Single unit. Abstraction + Data hiding is called Encapsulation  -> POJO classes
Polymorphisym - Polymorphism is many -> Having many forms and is invoked based on type. Differentiate between entities with the same name effectively.
				Overloading and overriding



1) If two are classes present, one parent class and child class and has IS-A relationship and have a test class
   P has m1() method, and C has m2() method
   where you create a object like P p = new C(); then you cannot access p.m2() method.
   
2) Auto Promotion in overloading

   Order: byte -> short
                         -> Int -> long -> float -> double  
          char  ->         
          
 3) Overloading: If String and Object accepting two different method arguments are present; same method name, if you pass null
      then which method would be invoked -> String method. Child class takes priority
      
 4) Overloading: If String and StringBuffer accepting two different method arguments are present; same method name, if you pass null
      then which method would be invoked -> 
      Both String and StringBuffer both are in same level, in hiearchy with Object -> so compile time error.
      

 5) In overriding, Child class overriden method, can change the return type from java 1.4 onwards
     But, it can be CO-variant return types. i.e., child classes can be used
     for Object Co-variant return type are -> any classes.
     for Number co-variant return type are -> Integer
     primitive data types are not allowed to change.
 
 6) Overriding -> related to access modifiers(public, protected, default, private)
 				Parent to child -> in child can increase scope (ex: from protected (Parent) to Public (Child))
 				
 7) Overriding -> related to exceptions
 				Parent to child -> in child can decrease scope (ex: from exception (Parent) to IOException (Child)) 		
 				
 				
 8) Overriding ->  with respective to Static methods.
 				   Overriding concept for static methods are not present, infact if we create a same method in child, then'
 			       it is called as method hiding.
 			       parent and child class has static void m1() method. P p = new C(); p.m1() -> would call parent m1() method.
 			       if non-static method then it is child method. but here it is parent m1 method would be invoked.
 
 9) a. Overloading P p = new C(); p.m1(); would call parent method, bcoz overloading happens in compile time.
    b. Overriding P p = new C(); p.m1(); would call child method, bcoz Overriding happens in run time.
 
 10) Overriding rules apply to only methods.
 		 	  	with respective to varibles
 		 	  	class P{ 
 		 	  	   int x = 888;
 		 	  	 }
 		 	  	 Class C {
 		 	  	    int x = 999;
 		 	  	 }  
 		 	  	 
 		 	  	 P p = new P(); p.x; // 888 ;;  C c = new C(); c.x; // 999 
 		 	  	 P p = new C(); p.x; // 888 ; variables we get based on reference type -> static or non static variables.
 		 	  	 
 11) You cannot create object for abstract classes, you have to extend abstract class and its child to create object.
     when child creates the object, the first line of child constructor, compiler automatically injects super() to call abstract class constructor.
     
 12) Abstract at class level:   Abstract class cannot be final. Abstract class cannot create object refer 11 point.
     Abstract at method level:  Abstract method should not have implementation. Abstract method cannot be final or static or private. final means cannot override. static belongs to class.
 	 Constructors at  Abstract classes: Abstract classes can have constructors, refer point +11 for more details.
 	 
 			       
 13) Interfaces: no implementation
                 all methods in an interface are public and abstract
                 any field (member) declared in interface is by default public static and final.
 			     Example: Created an Interface called Check and has one method validate, so 10 checks just implements Check(I) and
 			     write validate method implementation. While creating an object, based on check create object dynamically and pass that
 			     object to execute corresponding check.
 			     
 14) Wrapper classes
                Converting string to primitive data types
                parseInt(String x);
                parseDouble(String x);
                
                Converting string into wrapper classes
                Long l = Long.valueof(String x);
                
  15) Arrays:
                  int[] numbers = new int[5]; OR
                  int[] numbers new int[]{1,2,3,4,5,6,7,8,9};         
                  size is fixed, not auto growable, should go with array if we know size of the array. otherwise no use.
                  Ready made methods not available, DATA structure is not good, compare to collections.
                  
                  
  16) Collection: Growable in nature. Data structure is good. performance is good. Only Objects can hold.
  				   Collection is interface.
  				   Collections is class (utility class), which has Collections.sort(arraylist) method.
  				   												   Collections.search()
  				   												   
  17) ArrayList: Growable array
                 Duplicates allowed
                 inertion order preserved
                 Null insertion is possible												   
  				 All collection by default implements serializable, clonable inerface
  				 ArrayList and vector implements Random access interface
  				 If we want to get 1st index or 20th index or 50000 index value it takes same time due to RandomAccess
  				 For retrival purpose arraylist is better than linkedlist
  				 If frequent operation is retrival then better to go arraylist
  				 If add of any value in between and delete then we should not go for arralist, rather linkedlist is better.
  				 If in between anything to be added, then array will shift all its index to righ,same happens with delete.
  				 arraylist compare to vector, arraylist all methods are non-synchronized methods, while vector has all synch methods.            	     
 			     ArratList l1 = new ArrayList();
 			     List l = Collections.synchronizedList(l1);
 			     
 			      	      
 18) LinkedList: Growable array
                 Duplicates allowed
                 Insertion order preserved
                 Null insertion possible
                 doesnt implemenent RandomAccess
                 implements serializable, clonable inerface   
                 If we need to add new things in between or delete, then it is better to go with linkedlist
                 It doesn't shift index like ArrayList. 
                 Doubly linkedlist underlying data structure.
  
 19) Vector is exactly same as arraylist. Only difference is all methods in vector is synchronized methods.
      Vector v = new Vector();                 
 
 20) Stack: 
 			Child class of vector.
 			Stack s = new Stack();
 			Methods:
 			push, pop, peek; empty, search
 			
 21) Cursors of Java:
 		Iterator (for any collection object, can perform both read and remove operations)
 		Enumerator (applicable for vector and stack)
 		ListIterator				                                           
 		
 		Iterator itr  = l.iterator();
 		Methods: hasNext(), next(), remove()
 		
 		By using it itertor, Enumerator we can move forward only. so they call as Single direction cursors
 		Iterator, we can perform only read and remove operations. we cannot perform replacement of new objects.
 		To overcome, we have listIterator for list classes.
 		ListIterator is bi-directional cursor, move forward and also backward.
 		
 22) Set:
       Hashset, LinkedHashset
       SortedSet, Navigable set, Tree set.
       Insertion order not preserved.
       Duplicates are not allowed
       only one null is allowed.
       
       HashSet (C): Data Structure HashTable
                Insertion order not preserved, All objects inserted based on hashcode of objects.
                implements serializable, clonable interface.
                If search operation need to be done, then this is best interface.
                Load Factor: 0.75 -> This means initial capacity is 10, when 75% of objects fills, then it creates new object with more capacity.
                
       LinkedHashSet (C): HashTable+LinkedList (data structure)
        			  Insertion order is preserved
        			  
     
       SortedSet (I): It is the child interface of set.
                  Insert in some sorting order and duplicates are not allowed.
                  Implemenation class of SortedSet is TreeSet 	
                  
      TreeSet (C): Data Struture for Treeset is balanced Tree.
      			   Duplicates are not allowed.
      			   Insertion order not preserved, will be sorted based on Comparator passed.
      			   Null insertion is possible. only once.
      			   
      			   TreeSet t = new TreeSet(); // Default natural sorting order.
      			   TreeSet t = new TreeSet(Comparator c); // Customized sorting order. 
      			            	
 22) Comparable (Interface)
  			java.lang.package
  			one method -> public int compareTo(Object obj);
  					obj1.compareTo(obj2);
  					-ve iff obj1 has come before obj2
  					+ve iff obj1 has come after obj2
  					0 iff obj1 & obj2 are equal.
  					All wrapper classes, String class implements Comparable interface and 
  					in all wrapper classes and string class have implementation written for natural sorting order.
  					
 23) Comparator (Interface)
             Customized sorting order.
             methods: compare and equals.
             public int compare(Object obj1, Object obj2)
             -ve iff obj1 has come before obj2
  	      	 +ve iff obj1 has come after obj2
  			 0 iff obj1 & obj2 are equal.
  			 equals class implementation is optional, if you want specfic implementation, then you can implement.
  			 If you dont implement then, no error will come bcoz Object class has equls method, so that get invoked.
  			 
  24) JDK = JRE + Dev Tools
      JRE  = JVM + Library classes
      
  
  25) What is garbage collection in java?
  		 	Garbage collection is the process of identifying used and unused objects on java heap and removing unused object from the heap.
  		 	
  
  26) Functional Interface 
  				if parent interface is functional interface annotated and child interface is not, child will not get @functional interface features.
  				
  27) Java 8, with respective to interfaces.
  			1) Interface can have default methods
  			2) Interface can have static methods.
  			3) If you want to call interface method, then implemtation class object would call interface method.
  			4) Implementation class can override interface default method, but not with default keyword.
  			5) Default keyword applicable only for Interface.
  			6) Left Interface and Right interface has same m1() default method and testdemo class implements left and right,
  			   then it would give compile error. so you have to override m1() method in implementation class.
  			   Inside the implementation class, we should use Left.super.m1(); or Right.super.m1(); based on our requirement.which one to call.
  			7) Interface static method is allowed and to call them, only option is Interface.m1(); m1() here is static method for example.
  			   
  28) Functional Interfaces - Pre-Defined:
  		 1) Predicate (1 argument and boolean return type)
  		 2) Function  (1 argument and R(any) return type)
  		 3) Consumer  (1 argument and no return type)
  		 4) Supplier  (no argument and R(any) return type)
  		 
  		 2 Arguments:
  		 1) BiPredicate (2 argument and boolean return type)
  		 2) BiFunction  (2 argument and R(any) return type)
  		 3) BiConsumer  (2 argument and no return type)
  
         
         Function has some more:
         		Unary Operator child of function
         		If input argument and return type are same in function(1 one argument), then better to go with Unary Operator.
         		
         		Binary Operator
         		If input arguments and return type are same in function(2 arguments), then better to go with Binary Operator.
         		
  29)  Method Reference
              Key Point: No of argument(s) and argument types should match.
              If above statement is true, then we can use that method for our requirement.
              If method is static then use Classname:staticmethod otherwise object.method
              Only Arguments should be same, rest everything like access modifier, return type can be changed.
              
 			        		
         		 
  30) Streams: 
             Stream is an interface
  			 IO streams and java 8 streams are NOT SAME.
  			 Stream can be used in list.
  			 Filter is used to filter some results. (Conditional filter -> Predicate) list.stream.filter
  			 Map is used to return the same count passed (Input list count and output list count should be same). list.stream.map
  			 Filter and map also can be used together.
  			 Stream<Integer> stream = Stream.of(1,2,3,4,5,6,7,8,9);
  			 Stream<Integer> stream = Stream.of( new Integer[]{1,2,3,4,5,6,7,8,9} );
  			 
  			 Integer[] evenNumbersArr = list.stream.filter(i -> i%2 == 0).toArray(Integer[]::new); -> list to array
  			 Stream(), filter(), map(), collect(), sorted()
  			 sorted(comparator), min(comparator), max(comparator)
  			 foreach(), toarray(), stream.of
  			 
  			 flatmap() should be used in multidimensional arrays.
  			 
  31) Java.time package:
  			LocalDate date = LocalDate.now();
  			int dd = date.getDayOfmonth();
  			
  			LocalTime time = LocalTime.now();
  			
  			LocalDateTime dt = new LocakDateTime.now();			 
  			 
  			 
  32) String -- MOST IMPORTANT
                
                String Objects are immutable. (we cannot the value, if try to change a new string will be created in Heap)
                StringBuffer objects are mutable. (we can change the value)
                
                if you do concat a string then you should assign the value to variable.
                String s = new String("Sujith");
                s.concat("Kumar"); // this is not assigned to any variable, so concat happens but it will not store.
                sop(s); // Sujith
                
                s=s.concat("Kumar");// Sujith Kumar
                ------------------------------------------------------------------------------------------------------------
                String s1 = new String("Sujith");
                String s2 = new String("Sujith");
                syso(s1==s2); // false
                syso(s1.equals(s2)); // true
                
                StringBuffer sb1 = new StringBuffer("Sujith");
                StringBuffer sb2 = new StringBuffer("Sujith");
                
                syso(sb1==sb2); // false
                syso(sb1.equals(sb2)); // false
                
                String class has overridden equals method, so string equals will do content comparison.
                StringBuffer has not overridden equals method, so it uses Object class equals method which compares address/reference
                == always compares address/reference
                whenever we create any object with new keyword then new object will be created in Heap Memory and it would have own unique address/reference.
                ----------------------------------------------------------------------------------------------------------------------
                String s1 = new String("Sujith");
                String s2 = s1;
                syso(s1==s2); // true
                syso(s1.equals(s2)); // true
                ----------------------------------------------------------------------------------------------------------------------
                
  33) String -- CONTINUE             
  					Heap and SCP (String constant pool):
  					
  					String s = new String("Sujith");
  					
  					Above statement will create 2 objects, one in Heap memory and other in scp area (But scp area it will not reference s, it will just create)
  					Always with new one object will create in Heap memory
  					Second, it will check in SCP, if Sujith is not there it will create in SCP area also same object.
  					In SCP area it creates because of future purpose and object ref will be implicitly maintained by JVM, so it will not garbage collected.
  					
  					String s = "durga";
  					In, SCP area it will check if string same already exists. If yes it will start referencing to it. Otherwise it will create and start referencing.
  					
  					-------
  					String s1 = new String("durga");
  					String s2 = new String("durga");
  					String s3 = "durga"
  					String s4 = "durga";
  					In Heap it will create 2 objects S1 and S2 in Heap.
  					S1 will create in SCP as well. and while creating S2 it will create in Heap and then checks in SCP if durga is present, yes then it will start refernecing.
  					So s1 and s2 will be in Heap 
  					s1,s2,s3,s4 will be referning to one object in SCP area.
  					-------------------------------------------------------------------------------------------------------------------
  					
  					String s = new String("durga");
  					s.concat("Software");
  					s = s.concat("Solutions");
  					
  					first durga will be created in Heap and SCP.
  					durga software will created in Heap, but no assignment, so it will be garbage collected. Software will be created in SCP and we have used "" string litteral.
  			*****	then durgasolutions will be created only in Heap, bcoz runtime objects will be created in ONLY HEAP.
  					durgasoftware and durgasolutions are not created in SCP, bcoz runtime objects wont create in SCP.
  					Bcoz SCP meant for string constants not for runtime. so thats y it is called as String constant pool.
  					
                
                    FINAL STATEMENT: STRING IS THREAD SAFE. IF ANY MODIFICATON IT WILL CREATE NEW OBJECT.
                
                ------------------------------------------------------------------------------------------------------------
                
                   
  34) StringBuffer :  
  						If content is keep changing then should go for StringBuffer.
  						Default SB has 16 charcters length.
  						default capacity = 16;
  						
  						If CC reaches 16 then new with increased capacity will be created.
  						NewCapacity = (current capacity+1) * 2;
  						
  						StringBuffer sb = new StringBuffer ("Sujith");
  						syso(sb.capacity()); // 22;  Sujith.length + 16 ---
  						
  				--------------------------------------------------------------------------------------------------------------
  				
  				
  35) Exception Handling:
  
  						Exceptions which are checked by the compiler whether the programmer handling it or not for smooth execution of program at runtime.These are checked exceptions.				
  						
  						RunTime exception: Exception which are not checked by compiler whether the programmer handling or not. these are unchecked exceptions.
  						
  						Partially Checked Exception -> Throwable and Exception (Because these are generic exception not specific).
  						
  						Finally vs Return statement:
  						finally will get more priority. after finally only it returns.
  						Only one place where finally wont execute -> i.e when system.exit(0) executes.
  						system.exit(0) -> Normal Termination
  						system.exit(-1) -> Abnormal Termination.
  						
  						* If exception happens inside catch block still finally executes and abnormal termination.
  						*** Try, catch and finally  { } flower brackets are mandatory..
  						
  						Throws: it will throw the exception back to the calling method or JVM (DefaultException Handler).
  						       Throws keyword is to convince the Compiler, better to use try catch.
  						
  						Checked Exceptions: If try block is having code to reading a file then only catch block with IO exception is valid, otherwise it is invalid
  						Having only sop statemnt in try and in catch trying to catch IO except will give compilation error. This statement applies for all fullychecked exceptions.
  						for Partially and unchecked exception even the code doesnt have also its fine you can write catch exception with un-checked and partially checked exceptions.
  						
  						*** Customized exception should be always un-checked exception.
  								so we have to declare
  									class MyTest extends RuntimeException 
  									and NOT class MyTest extends Exception
  									
  									Checked exceptions are meant for Handling and if we want to display to the user, use Runtime Exception.
  									
  						If we use extends RunTimeException(un-checked) then no need to use throws in your method.
  						If we use extends Exception(checked) then mandatory to use throws.
  						
  									
  									
  36) ExecutorService service = Executors.newFixedThreadPool(10);   // It will create only 10 threads and once one thread completes it execution, it will be back
  																	// to pool and takes new task.
  																	// 10 threads will run in parallel.
  																	// 
  				for(int i=0;i<100;i++){
  						service.execute(new Task());
  				}									
  									  
      ExecutorService service = Executors.newCachedThreadPool(); // based on the request it keeps creating threads in this case 100 threads.
      
      ExecutorService service = Executors.newSceduledThreadPool(10);
        			service.scedule(new Task(), delay:15, SECONDS)
      				service.scedule(new Task(), initialdelay:15, period:10, SECONDS)
      
      ExecutorService service = Executors.newSingleThreadExecutor(); // Only one thread executor, once one thread compltes then it takes next task.    
  	
  37) Design Patterns:
  				1) Factory Design pattern -> Example: Plan -> Commercial, Business, industrial plan, Plan Factory
  										  -> Best example: CQ-UX File checks
  										  
  				2) Abstract Design Pattern -> It is one layer above Factory design pattern.
  										   -> Exmaple: Bank & loan -> Bank Factory, Loan Factory , Abstart Factory, Factory Creator-> Demo class.
  					
  				3) Single Design Pattern -> One instance and can be used anywhere same object
  								         -> Spring framework used single design pattern (Example: logger, properties loading, Database connection)
  								         ->	Double locking -> Volatile key work for multi core processors -> Multi threading.
  								         
  				4) Proto-type Design Pattern -> Cloning of an existing object instead of new object and cloned object can be customised as per requirement.
  											 -> Object creating is clostly, we can use this.
  											 
  				5) Adaptar Pattern -> This pattern is also known as Wrapper.
  								   -> This allows two or more previous incompatible objects to interact.
  								   -> Example: Bank -> Credit Card -> BankDetails 
  								   -> Based on Bank account find the employee is salaried, and check eliglibe for credit card.
  								    							 				         					   					  
  				6) Bridge Pattern -> This Bridge pattern says that just decouple the functional abstraction from the implementation so that two can vary independently.
  								  -> It enables the seperation of implementation from the interface.
  								  -> It improves the extendability. Decouple the abstraction with implemenation.
  								  -> It hides implementation details from the client.
  								  -> SHAPE -> Traingle, Square, Color
  								  -> Colour and Triangle, Square will be independent and will bridge both to in Shape...
  								  -> Shape will have Draw and colour both combining together here..
  								  
  				7) Fasaad pattern ->
  								  -> Fasaad pattern is a unified and simplied interface.
  								  -> Client will be not be known complex functionality.
  								  -> Example : Flipkart
  								  
  	38) HashMap -> Java 8 features is in the bucket if it is more than 8 nodes then it will convert to Balanced tree.
  					Map -> ConcurrentHashMap
  					       Syncronized Hashmap
  					       Hashmap
  					       HashTable
  					       Identity Hashmap
  					       EnumHashMap
  					       LinkedHashMap
  					       Treemap.
  					       
  					       							  		  	 
  	39) Multi-Threading:		 
  					Thread : A separate flow of execution is called a Thread.
  					1) Extending a Thread class
  					2) Implementing a Runnable Interface (this is best, bcoz of multiple inheritance is not applicable)
  					
  					JVM starts the run method, if we call start method
  					
  					Start() Method does:
  					1) Register the thread with thread schedular.
  					2) Perform all other mandatory activities.
  					3) Invoke run() method.
  			        		
         		    If we DONT override run() method in your class, it will call Thread class run method and it doesn't have anything and compiles and runs fine. But no result. No use.
         		    
         		    Thread Life Cycle: (MT t = MT()) New/Born  (t.start())-> Ready/Runnable(Thread Scedhudlar allocates) -> Running(Run method will run) -> Dead 
         		    
         		    Thread t = new Thread();
         		    Thread t = new Thread(Runnable r);
         		    Thread t = new Thread(String name);
         		    Thread t = new Thread(ThreadGroup g, String name);
         		    
         		    Thread Priority  -> 10 max priority and 1 min priority
         		    By Default : Norm Priority (5)
         		    Main thread default priority 5 and all children will get same 5 priotity by default, but we can change if we want.
         		    
         		    Prevent Thread Execution
         		    1) Yield -> when t.yield() called, it pauses the current thread and gives chance to the rest of waiting threads of same priority. If there is no other threads having 
         		      priority then the current thread only will continue its execution.
         		    
         		    2) Join()
         		    		If a thread wants to wait until to complete some other thread, then we should go for Join method.
         		    		if t1 thread runs t2.join(); then t1 will wait until t2 thread completes its execution.
         		    		If main thread executes t1.join that means main thread will wait until t1 thread completes its execution
         		    		If t1 thread has to wait for main thread to complete, then we need to first get main thread variable to call mainThread.join(),
         		    		so we have to create static varible in your thread t1 class and assign it in main thread class and use it.
         		    		
         		   3) sleep() - to pause the program for sometime.
         		   
     40) Multi-Threading:
      				Synchronization:
      					It is applicable for methods and blocks. It is a modifier.
      					In Synchrinonized methods are blocks, JVM will take care of aquiring the lock and releases the lock.
      					
      					There are two types of locks
      					1) Object level lock
      					2) Class level lock.
      					
      					1) Object lock:
      								If two threads trying operting on same object then lock is compulsory.
      								one gets the lock, and other has to wait.
      								If other thread trying to access any other non -synch methods then no lock reqruired.
      								But if t2 is trying to access synch method different than t1 accessing synch method,
      								then for t2 requires a lock. It is not possible even both are accessing differnet synch methods.
      								Object level lock will be applicable for all synch methods. Once lock is acquired then if some other
      								threads trying to operate on same object and differnt synch methods also they cannot until tehy have lock.
      								
      					2) Class level lock:
      								This lock is specific to static synch methods.
      								since it is static, it is belongs to Class.
      								Threads can aquire on Class level and another object level. It is OKAY.
      								To access static synch then CLass level lock is required and other threads trying to access other static synch methods, lock is required.
      								Non synch methods any time it can be accessable. without any locks.
      								
      								
      				   Inter Thread communication:
      				   Two threads can communicate each other by using wait(), notify() and notifyall().
      				   
      				   Wait(), notify and notifyall are in object class, not in thread class:
      				   	Bcoz, we call wait() , notify on objects. like student.wait(), so if we keep in Thread, objects cannot access,
      				   	so they have put in Object class so that any class can use this. But these methods are used only w.r.t to Threads.
      				   	
      				   	Wait(), notify and notifyall should be used in Synch method or blocks only, we cannot use them normally.
      				   	If we call somewhere else then we will get IllegalMonitor state exception.
      				   	So lock is important when we use wait notify..
      				   	Once you call wait, immeditely it releases the lock it goes into waiting state.
      				   	Once you call notify, not immediately but it releases the lock.
      				   	
      				   	Object.wait(), it releases the lock and it goes to waiting state. and once it gets notified it immediately will not go Runnable state, 
      				   	rather it goes to another waiting state to get the lock, once it gets the lock then it goes to Runnable state and based on Thread Scedular, it gets change to execute.
      				   	
      				   	Only these tree methods can release the lock, no other methods will release the lock.
      				   	 	 						 
      		Daemon Threads:		    		 
         		      1) Garbage collector
         		      2) Attach listener
         		      3) Signal Dispather
         		     
         		      If the main thread completes then all the daemon threads also will be terminated.
         		     
         	Thread Group:
         				      
         				ThreadGroup tg = new ThreadGroup("First Group") 
         				Thread t1 = new Thread(tg,"First Thread")
         				tg.setPriority(10);
         				we can see tg prority to set for all threads at a time.
         				
    41) Concurrent Package:
    				Problems with Synch keyword (methods are blocks)
    				1.5 java has introduced Concurrent package:
    				
    				1) We have flexibilty to trylock.
    				2) Fairness policy
    				3) Based on Fairness policy higest waiting time thread will get change.
    				4) No API to list all waiting threads earlier, now with concurrent we have.
    				5) Synch Methods and Synch blocks can be used only by itself (inside one method), but not mutiple methods.
    				
    		Lock(I) and ReentrantLock (IMplementation class)
    		   Lock lock = new ReentrantLock();    //fairness policy false by default.
    		   Lock lock = new ReentrantLock(true); //fairness policy true
    				lock.lock() and in finally lock.unlock.
    				
    		We have try.lock() and try.lock(long l, TimeUnit t)  -> t.NANOSEC, t.SECONDS, t.MINUTES
    		We have void getHoldCount(),
    			    boolean isHeldByCurrentThread()
    			    boolean isFair()
    			    boolean isLocked()
    			    Thread getowner
    			    Collection hasQueuedThreads.
    			    
    		
    		Thread Pools:
    				ExecutorService best option
    				
    				ExecutorService service = Executors.newFixedThreadpool(10); // So it automatically creates 10 threads
    				no need to create Thread t1 = new Thread (), t1.start() -> Thread t2 .... t10 not required.
    				
    				ExecutorService will create the threads for us and runs and once one Thread completes it, goes back to pool for next task.
    				Service.submit(job);
    				
    				once it completed then at the end service.shutdown() to close thread pool.
    				
    				Callable -> If we need to return anything, call method will return Object()
    				Future f = service.submit(job); (callable return can be captured in future in executor service)
    				Runnable is void run method   				     				    
         		    
         	ThreadLocal:
         	      Thread local is to store values per thread basis.
         	      Thread can access its own thread variables and not other thread variables.
         	      each thread can create its own varibles and store in thread local.
         	      
         	      
         	      
   42) Volatile Keyword:
   				Volatile is yet another way like synchrized of making class thread safe. It means multiple threads at the same time can access without any problem.
   				synchrized keyword has mutual exlucsion and visiblity, bcoz only one thread access synch methods so other threead will know what changes happened.
   				But in some cases we require only visibility features, in that case using synchrinzed will overkill its scality problems.
   				So volatile will come to rescue, So if 2  threads are operating on sharedObj, then one thread update will not be visible to other if both are running 
   				in differnet processors, so volatile will solve these problems, once anyupdate will make sure it will get updated in main memory instantly.So other thread will get new values. 
  
  
   43) Angular
   
   44) SQLS
   			Normalization
   			De-Normalization
   			
   			Normalization techiniques
   			 1) Duplicates records to be deleted
   			 2) Do not store lot many column in the table, rather split the tables and have a relation b/w two tables primary and forign key 
   			 3) Remove the columns which are not dependent on primary key.
   			 
   			 
   			For faster retrival:
   			 1) Index 
   			 2) Unique index
   			 3) Clustered index
   			 4) Non-clustered index. 
   	
   			JOINS
   			
   			UNION -> DISTINCT VALUES
   			UNION ALL -> ALL VALUES (INCLUDES DUPLICATES)
   					 				      	      	    
   			 				      	      	    
   			 				      	      	    
    
    			 				      	      	    